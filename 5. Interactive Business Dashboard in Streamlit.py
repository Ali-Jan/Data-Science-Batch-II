{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "93d58257-18f4-47d1-a4fc-388b2a48045b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-26 22:38:00.754 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-26 22:38:00.773 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-26 22:38:00.780 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-26 22:38:00.782 No runtime found, using MemoryCacheStorageManager\n",
      "2025-07-26 22:38:00.788 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-26 22:38:00.788 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "module 'streamlit' has no attribute 'empty'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[13], line 308\u001b[0m\n\u001b[0;32m    300\u001b[0m     st\u001b[38;5;241m.\u001b[39mdownload_button(\n\u001b[0;32m    301\u001b[0m         label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124müì• Download Filtered Data as CSV\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    302\u001b[0m         data\u001b[38;5;241m=\u001b[39mcsv,\n\u001b[0;32m    303\u001b[0m         file_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msuperstore_data_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdatetime\u001b[38;5;241m.\u001b[39mnow()\u001b[38;5;241m.\u001b[39mstrftime(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124mY\u001b[39m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124mm\u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m_\u001b[39m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124mH\u001b[39m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124mS\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.csv\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    304\u001b[0m         mime\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext/csv\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    305\u001b[0m     )\n\u001b[0;32m    307\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 308\u001b[0m     main()\n",
      "Cell \u001b[1;32mIn[13], line 158\u001b[0m, in \u001b[0;36mmain\u001b[1;34m()\u001b[0m\n\u001b[0;32m    155\u001b[0m st\u001b[38;5;241m.\u001b[39mmarkdown(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<h1 class=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmain-header\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m>üè™ Global Superstore Dashboard</h1>\u001b[39m\u001b[38;5;124m'\u001b[39m, unsafe_allow_html\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    157\u001b[0m \u001b[38;5;66;03m# Load data\u001b[39;00m\n\u001b[1;32m--> 158\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m st\u001b[38;5;241m.\u001b[39mspinner(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLoading data...\u001b[39m\u001b[38;5;124m'\u001b[39m):\n\u001b[0;32m    159\u001b[0m     df \u001b[38;5;241m=\u001b[39m load_and_prepare_data()\n\u001b[0;32m    161\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m df \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\contextlib.py:137\u001b[0m, in \u001b[0;36m_GeneratorContextManager.__enter__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    135\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39margs, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mkwds, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunc\n\u001b[0;32m    136\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 137\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mnext\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgen)\n\u001b[0;32m    138\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mStopIteration\u001b[39;00m:\n\u001b[0;32m    139\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgenerator didn\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt yield\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\elements\\spinner.py:48\u001b[0m, in \u001b[0;36mspinner\u001b[1;34m(text, _cache)\u001b[0m\n\u001b[0;32m     45\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mproto\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mSpinner_pb2\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Spinner \u001b[38;5;28;01mas\u001b[39;00m SpinnerProto\n\u001b[0;32m     46\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mstring_util\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m clean_text\n\u001b[1;32m---> 48\u001b[0m message \u001b[38;5;241m=\u001b[39m st\u001b[38;5;241m.\u001b[39mempty()\n\u001b[0;32m     50\u001b[0m \u001b[38;5;66;03m# Set the message 0.5 seconds in the future to avoid annoying\u001b[39;00m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;66;03m# flickering if this spinner runs too quickly.\u001b[39;00m\n\u001b[0;32m     52\u001b[0m DELAY_SECS \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.5\u001b[39m\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'streamlit' has no attribute 'empty'"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "import numpy as np\n",
    "from datetime import datetime, timedelta\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Page configuration\n",
    "st.set_page_config(\n",
    "    page_title=\"Global Superstore Dashboard\",\n",
    "    page_icon=\"üìä\",\n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "# Custom CSS for better styling\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    "    .main-header {\n",
    "        font-size: 3rem;\n",
    "        font-weight: bold;\n",
    "        color: #1f77b4;\n",
    "        text-align: center;\n",
    "        margin-bottom: 2rem;\n",
    "    }\n",
    "    .metric-container {\n",
    "        background-color: #f0f2f6;\n",
    "        padding: 1rem;\n",
    "        border-radius: 0.5rem;\n",
    "        border-left: 5px solid #1f77b4;\n",
    "    }\n",
    "    .sidebar .sidebar-content {\n",
    "        background-color: #f8f9fa;\n",
    "    }\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "@st.cache_data\n",
    "def load_and_prepare_data():\n",
    "    \"\"\"Load and prepare the dataset\"\"\"\n",
    "    try:\n",
    "        # Try to load the CSV file\n",
    "        df = pd.read_csv('Global_Superstore.csv')\n",
    "        df['Order Date'] = pd.to_datetime(df['Order Date'])\n",
    "        \n",
    "        # Calculate Profit Margin if not present\n",
    "        if 'Profit Margin' not in df.columns:\n",
    "            df['Profit Margin'] = (df['Profit'] / df['Sales']) * 100\n",
    "        \n",
    "        return df\n",
    "    except FileNotFoundError:\n",
    "        st.error(\"‚ö†Ô∏è Data file 'Global_Superstore.csv' not found. Please upload your dataset.\")\n",
    "        return None\n",
    "    \n",
    "def create_kpi_metrics(df):\n",
    "    \"\"\"Create KPI metrics\"\"\"\n",
    "    total_sales = df['Sales'].sum()\n",
    "    total_profit = df['Profit'].sum()\n",
    "    total_orders = len(df)\n",
    "    avg_profit_margin = df['Profit Margin'].mean()\n",
    "    \n",
    "    return total_sales, total_profit, total_orders, avg_profit_margin\n",
    "\n",
    "def create_sales_trend_chart(df):\n",
    "    \"\"\"Create sales trend over time\"\"\"\n",
    "    monthly_sales = df.groupby([df['Order Date'].dt.to_period('M')])['Sales'].sum().reset_index()\n",
    "    monthly_sales['Order Date'] = monthly_sales['Order Date'].astype(str)\n",
    "    \n",
    "    fig = px.line(\n",
    "        monthly_sales, \n",
    "        x='Order Date', \n",
    "        y='Sales',\n",
    "        title='Sales Trend Over Time',\n",
    "        labels={'Sales': 'Sales ($)', 'Order Date': 'Month'}\n",
    "    )\n",
    "    fig.update_layout(\n",
    "        xaxis_tickangle=45,\n",
    "        height=400\n",
    "    )\n",
    "    return fig\n",
    "\n",
    "def create_region_performance_chart(df):\n",
    "    \"\"\"Create region-wise performance chart\"\"\"\n",
    "    region_data = df.groupby('Region').agg({\n",
    "        'Sales': 'sum',\n",
    "        'Profit': 'sum'\n",
    "    }).reset_index()\n",
    "    \n",
    "    fig = make_subplots(\n",
    "        rows=1, cols=2,\n",
    "        subplot_titles=('Sales by Region', 'Profit by Region'),\n",
    "        specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}]]\n",
    "    )\n",
    "    \n",
    "    fig.add_trace(\n",
    "        go.Bar(x=region_data['Region'], y=region_data['Sales'], name='Sales'),\n",
    "        row=1, col=1\n",
    "    )\n",
    "    \n",
    "    fig.add_trace(\n",
    "        go.Bar(x=region_data['Region'], y=region_data['Profit'], name='Profit'),\n",
    "        row=1, col=2\n",
    "    )\n",
    "    \n",
    "    fig.update_layout(height=400, showlegend=False)\n",
    "    return fig\n",
    "\n",
    "def create_category_pie_chart(df):\n",
    "    \"\"\"Create category distribution pie chart\"\"\"\n",
    "    category_sales = df.groupby('Category')['Sales'].sum().reset_index()\n",
    "    \n",
    "    fig = px.pie(\n",
    "        category_sales,\n",
    "        values='Sales',\n",
    "        names='Category',\n",
    "        title='Sales Distribution by Category'\n",
    "    )\n",
    "    fig.update_layout(height=400)\n",
    "    return fig\n",
    "\n",
    "def create_top_customers_chart(df):\n",
    "    \"\"\"Create top 5 customers by sales chart\"\"\"\n",
    "    top_customers = df.groupby('Customer Name')['Sales'].sum().nlargest(5).reset_index()\n",
    "    \n",
    "    fig = px.bar(\n",
    "        top_customers,\n",
    "        x='Sales',\n",
    "        y='Customer Name',\n",
    "        orientation='h',\n",
    "        title='Top 5 Customers by Sales',\n",
    "        labels={'Sales': 'Total Sales ($)', 'Customer Name': 'Customer'}\n",
    "    )\n",
    "    fig.update_layout(height=400)\n",
    "    return fig\n",
    "\n",
    "def create_profitability_scatter(df):\n",
    "    \"\"\"Create sales vs profit scatter plot\"\"\"\n",
    "    fig = px.scatter(\n",
    "        df,\n",
    "        x='Sales',\n",
    "        y='Profit',\n",
    "        color='Category',\n",
    "        size='Quantity',\n",
    "        title='Sales vs Profit Analysis',\n",
    "        labels={'Sales': 'Sales ($)', 'Profit': 'Profit ($)'}\n",
    "    )\n",
    "    fig.update_layout(height=400)\n",
    "    return fig\n",
    "\n",
    "def main():\n",
    "    # Header\n",
    "    st.markdown('<h1 class=\"main-header\">üè™ Global Superstore Dashboard</h1>', unsafe_allow_html=True)\n",
    "    \n",
    "    # Load data\n",
    "    with st.spinner('Loading data...'):\n",
    "        df = load_and_prepare_data()\n",
    "    \n",
    "    if df is None:\n",
    "        st.stop()\n",
    "    \n",
    "    # Sidebar filters\n",
    "    st.sidebar.header(\"üìã Filters\")\n",
    "    \n",
    "    # Region filter\n",
    "    regions = ['All'] + sorted(df['Region'].unique().tolist())\n",
    "    selected_region = st.sidebar.selectbox('Select Region:', regions)\n",
    "    \n",
    "    # Category filter\n",
    "    categories = ['All'] + sorted(df['Category'].unique().tolist())\n",
    "    selected_category = st.sidebar.selectbox('Select Category:', categories)\n",
    "    \n",
    "    # Sub-category filter\n",
    "    if selected_category != 'All':\n",
    "        sub_categories = ['All'] + sorted(df[df['Category'] == selected_category]['Sub-Category'].unique().tolist())\n",
    "    else:\n",
    "        sub_categories = ['All'] + sorted(df['Sub-Category'].unique().tolist())\n",
    "    selected_sub_category = st.sidebar.selectbox('Select Sub-Category:', sub_categories)\n",
    "    \n",
    "    # Date range filter\n",
    "    min_date = df['Order Date'].min().date()\n",
    "    max_date = df['Order Date'].max().date()\n",
    "    date_range = st.sidebar.date_input(\n",
    "        'Select Date Range:',\n",
    "        value=(min_date, max_date),\n",
    "        min_value=min_date,\n",
    "        max_value=max_date\n",
    "    )\n",
    "    \n",
    "    # Apply filters\n",
    "    filtered_df = df.copy()\n",
    "    \n",
    "    if selected_region != 'All':\n",
    "        filtered_df = filtered_df[filtered_df['Region'] == selected_region]\n",
    "    \n",
    "    if selected_category != 'All':\n",
    "        filtered_df = filtered_df[filtered_df['Category'] == selected_category]\n",
    "    \n",
    "    if selected_sub_category != 'All':\n",
    "        filtered_df = filtered_df[filtered_df['Sub-Category'] == selected_sub_category]\n",
    "    \n",
    "    if len(date_range) == 2:\n",
    "        start_date, end_date = date_range\n",
    "        filtered_df = filtered_df[\n",
    "            (filtered_df['Order Date'].dt.date >= start_date) & \n",
    "            (filtered_df['Order Date'].dt.date <= end_date)\n",
    "        ]\n",
    "    \n",
    "    # Display filtered data info\n",
    "    st.sidebar.markdown(\"---\")\n",
    "    st.sidebar.markdown(f\"**Records shown:** {len(filtered_df):,}\")\n",
    "    st.sidebar.markdown(f\"**Total records:** {len(df):,}\")\n",
    "    \n",
    "    # Main dashboard content\n",
    "    if len(filtered_df) == 0:\n",
    "        st.warning(\"No data available for the selected filters.\")\n",
    "        return\n",
    "    \n",
    "    # KPI Section\n",
    "    st.markdown(\"## üìä Key Performance Indicators\")\n",
    "    \n",
    "    total_sales, total_profit, total_orders, avg_profit_margin = create_kpi_metrics(filtered_df)\n",
    "    \n",
    "    col1, col2, col3, col4 = st.columns(4)\n",
    "    \n",
    "    with col1:\n",
    "        st.metric(\n",
    "            label=\"üí∞ Total Sales\",\n",
    "            value=f\"${total_sales:,.2f}\",\n",
    "            delta=f\"{len(filtered_df)} orders\"\n",
    "        )\n",
    "    \n",
    "    with col2:\n",
    "        st.metric(\n",
    "            label=\"üìà Total Profit\",\n",
    "            value=f\"${total_profit:,.2f}\",\n",
    "            delta=f\"{total_profit/total_sales*100:.1f}% margin\"\n",
    "        )\n",
    "    \n",
    "    with col3:\n",
    "        st.metric(\n",
    "            label=\"üõçÔ∏è Total Orders\",\n",
    "            value=f\"{total_orders:,}\",\n",
    "            delta=f\"${total_sales/total_orders:.2f} avg\"\n",
    "        )\n",
    "    \n",
    "    with col4:\n",
    "        st.metric(\n",
    "            label=\"üìä Avg Profit Margin\",\n",
    "            value=f\"{avg_profit_margin:.1f}%\",\n",
    "            delta=\"Per order\"\n",
    "        )\n",
    "    \n",
    "    # Charts Section\n",
    "    st.markdown(\"---\")\n",
    "    st.markdown(\"## üìà Performance Analysis\")\n",
    "    \n",
    "    # Row 1: Sales trend and region performance\n",
    "    col1, col2 = st.columns(2)\n",
    "    \n",
    "    with col1:\n",
    "        st.plotly_chart(create_sales_trend_chart(filtered_df), use_container_width=True)\n",
    "    \n",
    "    with col2:\n",
    "        st.plotly_chart(create_region_performance_chart(filtered_df), use_container_width=True)\n",
    "    \n",
    "    # Row 2: Category distribution and top customers\n",
    "    col1, col2 = st.columns(2)\n",
    "    \n",
    "    with col1:\n",
    "        st.plotly_chart(create_category_pie_chart(filtered_df), use_container_width=True)\n",
    "    \n",
    "    with col2:\n",
    "        st.plotly_chart(create_top_customers_chart(filtered_df), use_container_width=True)\n",
    "    \n",
    "    # Row 3: Profitability analysis\n",
    "    st.plotly_chart(create_profitability_scatter(filtered_df), use_container_width=True)\n",
    "    \n",
    "    # Data Table Section\n",
    "    st.markdown(\"---\")\n",
    "    st.markdown(\"## üìã Detailed Data\")\n",
    "    \n",
    "    # Show summary statistics\n",
    "    with st.expander(\"Summary Statistics\"):\n",
    "        st.write(filtered_df.describe())\n",
    "    \n",
    "    # Show top 10 records\n",
    "    with st.expander(\"Sample Data (Top 10 Records)\"):\n",
    "        display_columns = ['Order Date', 'Region', 'Category', 'Sub-Category', \n",
    "                          'Customer Name', 'Sales', 'Profit', 'Profit Margin']\n",
    "        st.dataframe(\n",
    "            filtered_df[display_columns].head(10),\n",
    "            use_container_width=True\n",
    "        )\n",
    "    \n",
    "    # Download option\n",
    "    csv = filtered_df.to_csv(index=False)\n",
    "    st.download_button(\n",
    "        label=\"üì• Download Filtered Data as CSV\",\n",
    "        data=csv,\n",
    "        file_name=f\"superstore_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\",\n",
    "        mime=\"text/csv\"\n",
    "    )\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87fe589f-acb6-4704-bc3e-65e18b8e78fd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
